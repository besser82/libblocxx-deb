AC_PREREQ([2.57])
AC_INIT(BloCxx, 2.1.0, blocxx-devel@lists.sourceforge.net)	
dnl When we implement --help and --version for all installed binaries,
dnl use the std-options option
dnl AM_INIT_AUTOMAKE([foreign dist-bzip2 std-options 1.6.3])

dnl We are a "foreign" type distribution (i.e. don't require all the
dnl standard GNU files)
dnl And we want a dist-bzip2 rule to be able to create .tar.bz2 dist files.
dnl And we require automake >= 1.9 (because of the tar-ustar option)
AM_INIT_AUTOMAKE([foreign dist-bzip2 tar-ustar 1.9])
AC_CONFIG_SRCDIR(Makefile.am)
AM_CONFIG_HEADER(config.h)

dnl Create a BLOCXX_config.h containing config.h flags with BLOCXX_ prefix.
BX_PREFIX_CONFIG_H([blocxx/BLOCXX_config.h], [BLOCXX])

BLOCXX_MAJOR_VERSION=`echo ${PACKAGE_VERSION} | sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\)/\1/g'`
BLOCXX_MINOR_VERSION=`echo ${PACKAGE_VERSION} | sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\)/\2/g'`
BLOCXX_MICRO_VERSION=`echo ${PACKAGE_VERSION} | sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\)/\3/g'`
dnl This gets incremented every release that a header has changed.
LIBRARY_VERSION=6
BLOCXX_LIBRARY_VERSION=6

AC_SUBST(BLOCXX_MAJOR_VERSION)
AC_DEFINE_UNQUOTED(BLOCXX_MAJOR_VERSION, $BLOCXX_MAJOR_VERSION, [blocxx Major Version])
AC_SUBST(BLOCXX_MINOR_VERSION)
AC_DEFINE_UNQUOTED(BLOCXX_MINOR_VERSION, $BLOCXX_MINOR_VERSION, [blocxx Minor Version])
AC_SUBST(BLOCXX_MICRO_VERSION)
AC_DEFINE_UNQUOTED(BLOCXX_MICRO_VERSION, $BLOCXX_MICRO_VERSION, [blocxx Micro Version])
AC_SUBST(BLOCXX_VERSION_NUMBER)
AC_DEFINE_UNQUOTED(BLOCXX_VERSION_NUMBER, (BLOCXX_MAJOR_VERSION*10000 + BLOCXX_MINOR_VERSION*100 + BLOCXX_MICRO_VERSION), [Numeric blocxx Version])
AC_SUBST(LIBRARY_VERSION)
AC_SUBST(BLOCXX_LIBRARY_VERSION)
AC_DEFINE_UNQUOTED(BLOCXX_LIBRARY_VERSION, $BLOCXX_LIBRARY_VERSION, [blocxx Library Version])

AM_MAINTAINER_MODE
#AM_DISABLE_STATIC

dnl Checks for programs.
AC_CANONICAL_HOST
AC_PROG_CC
AC_PROG_CXX
AC_LANG_C
#AC_LANG_CPLUSPLUS
AM_PROG_LEX
AC_PROG_RANLIB
AM_CONDITIONAL(HAVE_FLEX, test x$LEX = xflex)
AC_PROG_YACC

AC_PATH_PROG(AR, ar, ar)
SAVED_AR=$AR
AR="\$(shell pwd)/\$(top_srcdir)/blocxx_ar.sh $SAVED_AR --"

AC_PATH_PROG(MV, mv, mv)
AC_PATH_PROG(RM, rm, rm)
AC_PATH_PROG(SED, sed, sed)

dnl FreeBSD and darwin have true in /usr/bin/true, while most other systems
dnl   (e.g. linux) have true in /bin/true . Similarly for false.
dnl
dnl So here we find out where true and false are, and add #defines to the config
dnl   headers. ExecTestCases.cpp relies on these.
dnl
AC_PATH_PROG(TRUE_PATHNAME, true, [Error, true not found.])
AC_DEFINE_UNQUOTED(TRUE_PATHNAME, "$TRUE_PATHNAME", [Where true is.])

AC_PATH_PROG(FALSE_PATHNAME, false, [Error, false not found.])
AC_DEFINE_UNQUOTED(FALSE_PATHNAME, "$FALSE_PATHNAME", [Where false is.])

dnl Check doxygen and the dot utility
AC_PATH_PROG(DOXYGEN, doxygen, :)
AC_PATH_PROG(DOT, dot)
if test "x$DOT" = "x" ; then
	HAVE_DOT="NO"
else
	HAVE_DOT="YES"
fi
AC_SUBST(HAVE_DOT)

dnl remember flags provided by user
USER_CFLAGS="$CFLAGS"
USER_CXXFLAGS="$CXXFLAGS"
USER_CPPFLAGS="$CPPFLAGS"
USER_LDFLAGS="$LDFLAGS"

dnl Enable large file support (also adds --disable-largefile option)
AC_SYS_LARGEFILE
PLAT_CPPFLAGS=""
if test "$enable_largefile" != no; then
	AC_DEFINE(WITH_LARGEFILE, 1,
	[Defined if large file support requested while configure])
	if test "$ac_cv_sys_file_offset_bits" != no; then
		PLAT_CPPFLAGS="-D_FILE_OFFSET_BITS=$ac_cv_sys_file_offset_bits"
	fi
	if test "$ac_cv_sys_large_files" != no; then
		PLAT_CPPFLAGS="-D_LARGE_FILES=$ac_cv_sys_large_files ${PLAT_CPPFLAGS}"
	fi
fi

dnl
dnl FIXME: DO WE NEED THIS FOR SOME REASON?!
dnl
dnl Check to see if we have Perl development stuff
dnl This needs to be before we set any CFLAGS since setting DEBUG screws up perl.h
HAVE_PERL=no
#PGAC_CHECK_PERL_CONFIGS([archlibexp,privlibexp,useshrplib])
PGAC_CHECK_PERL_CONFIG(archlibexp)
PGAC_CHECK_PERL_CONFIG(privlibexp)
PGAC_CHECK_PERL_CONFIG(useshrplib)
PGAC_CHECK_PERL_EMBED_CCFLAGS
PGAC_CHECK_PERL_EMBED_LDFLAGS
saved_LDFLAGS="$LDFLAGS"
saved_CFLAGS="$CFLAGS"
CFLAGS="$CFLAGS $perl_embed_ccflags"
LDFLAGS="$LDFLAGS $perl_embed_ldflags"
# Basic test to check for compilation success
AC_TRY_COMPILE(
	[
	#include <EXTERN.h>
	#include <perl.h>
	],
	[],
	[
		HAVE_PERL=yes
		break;
	]
)
CFLAGS="$saved_CFLAGS"
LDFLAGS="$saved_LDFLAGS"

ENABLE_PPIFC=no
AC_ARG_ENABLE(perl-providerifc,
BLOCXX_HELP_STRING(--enable-perl-providerifc,enable the perl provider interface),
[
	ENABLE_PPIFC=yes
	if test x$HAVE_PERL != xyes; then
		AC_MSG_ERROR([Cannot enable Perl provider interface])
	fi
])
AM_CONDITIONAL([ENABLE_PERL_PROVIDERIFC],
	[test x$HAVE_PERL = xyes -a x$ENABLE_PPIFC = xyes])

ENABLE_MPIFC=no
AC_ARG_ENABLE(monitored-perl-ifc,
BLOCXX_HELP_STRING(--enable-monitored-perl-ifc,enable the monitored perl process interface),
[
	ENABLE_MPIFC=yes
	if test x$HAVE_PERL != xyes; then
		AC_MSG_ERROR([Cannot enable monitored Perl process interface])
	fi
])
AM_CONDITIONAL([ENABLE_MONITORED_PERL_IFC],
	[test x$HAVE_PERL = xyes -a x$ENABLE_MPIFC = xyes])

# initialize platform specific build variables
STATIC_LINK_FLAGS=
DYNAMIC_LINK_FLAGS=
DYNAMIC_EXPORT_FLAG=
RPATH_LINK_FLAG=
RPATH_LINK_FLAG_REQUIRED=0
RPATH_DEFAULT_PATH=
REALTIME_LIBS=
ICONV_LIB=

# 64-bit flags are not needed on most platforms.  These will be added to the
# C*FLAGS if --enable-64-bit-build is used.
CFLAG_ADD_64_BIT=
LDFLAG_ADD_64_BIT=

# initialize variables for blocxx.pc file
#
# FIXME: what's about the other stuff, like:
# - add non-pkgconfig lib dependencies to PKG_CONF_LIBS (e.g. regex)?
# - check if to add flags like -pthread or LFS support to PKG_CONF_CFLAGS?
#
PKG_CONF_VERSION=${PACKAGE_VERSION}
PKG_CONF_REQUIRES=
PKG_CONF_CFLAGS=
PKG_CONF_LIBS=

AC_MSG_NOTICE(["Setting host specific flags..."])
if test -z "$target"; then
	target="$host"
fi

#Figure out which platform dir to compile
case "$target" in
*-*-aix*)
	AC_MSG_WARN(*** AIX support is currently experimental ***)
	AIX=1
	AC_DEFINE(AIX, 1, Target OS is AIX)
	AC_SUBST(AIX)
	AC_DEFINE(ENV_VAR_LIBPATH, "LIBPATH", LIBPATH env var gives path for finding shared libs)
	AC_SUBST(ENV_VAR_LIBPATH)
	LIBS="$LIBS -lxnet"
	AIX_COMMON_CFLAGS="-D_REENTRANT -D_XOPEN_SOURCE_EXTENDED=1 -D_XOPEN_SOURCE=500 -D_ALL_SOURCE=1"
	AIX_COMMON_LFLAGS="-L/usr/lib/threads"
	RPATH_DEFAULT_PATH="/usr/lib:"

	# This figures out which compiler is invoked, and sets the default flags based on that.
	AIX_COMPILER=`basename $CXX`
	case $AIX_COMPILER in 
	xlC) 
		AC_MSG_WARN(***************************************************************************)
		AC_MSG_WARN(xlC will fail.  xlC_r should be used instead.)
		AC_MSG_WARN(***************************************************************************)
		exit 1
		;;
	xlC_r) 
		AC_MSG_WARN(***************************************************************************)
		AC_MSG_WARN(WARNING: Although it currently compiles, the C++ library has thread issues.)
		AC_MSG_WARN(Make sure the tests run correctly.)
		AC_MSG_WARN(***************************************************************************)
		PLAT_CFLAGS="$AIX_COMMON_CFLAGS"
		PLAT_CXXFLAGS="$AIX_COMMON_CFLAGS -qrtti=all"
		CBINLINKFLAGS="-brtl -Wl,-bh:5"
		CXXCOMMONLINKFLAGS="-brtl"
		STATIC_LINK_FLAGS="-Wl,-bstatic"
		DYNAMIC_LINK_FLAGS="-Wl,-bdynamic"
		CXXBINLINKFLAGS="$AIX_COMMON_LFLAGS $DYNAMIC_LINK_FLAGS -lpthread -qthreaded"
		RPATH_LINK_FLAG="-blibpath:"
		CXXSHAREDLIBLINKFLAGS='-qmkshrobj -G'
		STATIC_SERVICES=""
#-bexport:$(@:%.so=%.exp)
		DO_NOT_USE_DASH_PTHREAD=1
		DYNAMIC_EXPORT_FLAG=-bexpall
		;;
	g++*)
		# Some versions of gcc will work.  Others will fail.  Make sure it works.
		AIX_COMPILER_VERSION=`$CXX --version | head -n1 | cut -f3 -d' '`
		case $AIX_COMPILER_VERSION in
		1.* | 2.* | 3.[012]*)
			AC_MSG_WARN(***************************************************************************)
			AC_MSG_WARN(This gcc compiler version ($AIX_COMPILER_VERSION) will fail.  Aborting now.)
			AC_MSG_WARN(***************************************************************************)
			exit 1;
			;;
		3.3*)
			AC_MSG_WARN(***************************************************************************)
			AC_MSG_WARN(Your compiler should have been patched, and the C++ standard library checked,)
			AC_MSG_WARN(or problems with exception handling will cause BloCxx to fail.)
			AC_MSG_WARN(***************************************************************************)
			;;
		3.4*)
			# No issues known (at the present)
			;;
		*)   
			# Let it pass.  It must be a newer (and hopefully functional) version of gcc.
			;;
		esac
		
		PLAT_CFLAGS="$AIX_COMMON_CFLAGS -pthread -W -Wall"
		PLAT_CXXFLAGS="$AIX_COMMON_CFLAGS -pthread -W -Wall"
		CBINLINKFLAGS="-Wl,-brtl"
		CXXCOMMONLINKFLAGS="$AIX_COMMON_LFLAGS -pthread -Wl,-brtl" 
		CXXBINLINKFLAGS="-Wl,-brtl"
		STATIC_LINK_FLAGS="-Wl,-bstatic"
		DYNAMIC_LINK_FLAGS="-Wl,-bdynamic"
		RPATH_LINK_FLAG="-Wl,-blibpath:"
		# This is a bad hack, as it includes an export using GNU make (others?)
		# substitutions. 
		CXXSHAREDLIBLINKFLAGS='-shared -Wl,-G -Wl,-bnoentry -Wl,-bexport:$(@:%.so=%.exp)'
		DYNAMIC_EXPORT_FLAG=-Wl,-bexpall
		;;
	*)
		AC_MSG_WARN(***************************************************************************)
		AC_MSG_WARN(WARNING: Your C++ compiler ($AIX_COMPILER) has not been tested.)
		AC_MSG_WARN(Using GCC defaults.)
		AC_MSG_WARN(***************************************************************************)

		PLAT_CFLAGS="$AIX_COMMON_CFLAGS -pthread -W -Wall"
		PLAT_CXXFLAGS="$AIX_COMMON_CFLAGS -pthread -W -Wall"
		CBINLINKFLAGS="-Wl,-brtl"
		CXXCOMMONLINKFLAGS="$AIX_COMMON_LFLAGS -pthread -Wl,-brtl"
		CXXBINLINKFLAGS=""
		STATIC_LINK_FLAGS="-Wl,-bstatic"
		DYNAMIC_LINK_FLAGS="-Wl,-bdynamic"
		RPATH_LINK_FLAG="-Wl,-blibpath:"
		# This is a bad hack, as it includes an export using GNU make (others?)
		# substitutions. 
		CXXSHAREDLIBLINKFLAGS='-shared -Wl,-G -Wl,-bnoentry -Wl,-bexport:$(@:%.so=%.exp)'
		DYNAMIC_EXPORT_FLAG=-Wl,-bexpall
		;;
	esac

	PLAT_OPTFLAGS="-O0"
	LIB_EXT="so"
	AC_DEFINE(SETEUID_BREAKS_SETUID, 1, [seteuid() breaks setuid()])
	AC_DEFINE(BROKEN_SETREUID, 1, [setreuid() is broken])
	AC_DEFINE(BROKEN_SETREGID, 1, [setregid() is broken])

	;;
#*-*-cygwin*)
#	;;
*-*-darwin*)
	DARWIN=1
	PLATFORMDIR="posix"
	AC_DEFINE(DARWIN, 1, Target OS is DARWIN)
	AC_DEFINE(ENV_VAR_LIBPATH, "DYLD_LIBRARY_PATH", DYLD_LIBRARY_PATH env var gives path for finding shared libs)
	AC_SUBST(ENV_VAR_LIBPATH)
	PLAT_CFLAGS="-fno-common -D_REENTRANT"
	PLAT_CXXFLAGS="-no-cpp-precomp -fno-common -D_REENTRANT"
	CXXCOMMONLINKFLAGS="-Wl,-search_paths_first"
	CXXBINLINKFLAGS=""
	CXXSHAREDLIBLINKFLAGS="-dynamiclib -install_name \$(thelibdir)/\$(DYFILENAME) -compatibility_version \$(LIBRARY_BINARY_VERSION) -current_version \$(LIBRARY_BINARY_VERSION)"
	CXXBUNDLELIBLINKFLAGS="-bundle"
	PLAT_OPTFLAGS="-O2"
	LIB_EXT="dylib.bundle"
	BLOCXX_NO_WDEPRECATED=1
	AC_DEFINE(SETEUID_BREAKS_SETUID, 1, [seteuid() breaks setuid()])
	AC_DEFINE(BROKEN_SETREUID, 1, [setreuid() is broken])
	AC_DEFINE(BROKEN_SETREGID, 1, [setregid() is broken])

	;;
#*-*-dgux*)
#	;;
#*-*-hpux10*)
#	;;
*-*-hpux11*)
	HPUX=1
	AC_DEFINE(HPUX)
	AC_DEFINE(ENV_VAR_LIBPATH, "SHLIB_PATH", SHLIB_PATH env var gives path for finding shared libs)
	AC_SUBST(ENV_VAR_LIBPATH)
	LIBS="$LIBS -lxnet -lpthread -lrt"
	PLAT_CFLAGS="+Z -mt -D_XOPEN_SOURCE -D_XOPEN_SOURCE_EXTENDED=1"
	PLAT_CXXFLAGS="-AA +Z -mt +p -D_XOPEN_SOURCE -D_XOPEN_SOURCE_EXTENDED=1 -D__HPACC_THREAD_SAFE_RB_TREE"
	PLAT_CPPFLAGS="-AA $PLAT_CPPFLAGS" # need this so the configure tests work right.

	CXXCOMMONLINKFLAGS="-AA -mt +Z -Wl,+s -z"
	CXXBINLINKFLAGS="-Wl,-B,immediate -Wl,-E $LDFLAGS"
	CXXSHAREDLIBLINKFLAGS="-b -Wl,+h,\$@.\$(LIBRARY_BINARY_VERSION)"
	PLAT_OPTFLAGS="+O2"

	# These 64-bit flags work with both parisc 2.0 and ia64.
	CFLAG_ADD_64_BIT="+DD64"
	LDFLAG_ADD_64_BIT="-L/usr/lib/hpux64"

	# This next line is wrong if --enable-64-bit-build is used.  It will be replaced later.
	RPATH_DEFAULT_PATH="${libdir}:/usr/lib:"

	# Normally, this would deserve another case statement, but very few things need to be modified on ia64.
	case "$target" in
		*ia64*)
			LIB_EXT="so"
			PLAT_CFLAGS="$PLAT_CFLAGS -D_INCLUDE_LONGLONG"
			PLAT_CXXFLAGS="$PLAT_CXXFLAGS -D_INCLUDE_LONGLONG"
			# Assume 32-bit unless told (later) to do otherwise.
			RPATH_DEFAULT_PATH="${libdir}:/usr/lib/hpux32:"
			RPATH_DEFAULT_PATH_64="${libdir}:/usr/lib/hpux64:"
		;;
		*) LIB_EXT="sl" ;;
	esac

	RPATH_LINK_FLAG="-Wl,+s -Wl,+b"
	dnl aCC causes nasty failures if INCLUDE_AES_SOURCE is defined.
	echo "#undef _INCLUDE_AES_SOURCE" >> confdefs.h
	;;
#*-*-irix5*)
#	;;
#*-*-irix6*)
#	;;
*-*-linux*)
	LINUX=1
	AC_DEFINE(GNU_LINUX)
	AC_DEFINE(ENV_VAR_LIBPATH, "LD_LIBRARY_PATH", LD_LIBRARY_PATH env var gives path for finding shared libs)
	AC_SUBST(ENV_VAR_LIBPATH)	
	PLAT_CFLAGS="-fPIC -D_REENTRANT -D_GNU_SOURCE -pipe"
	PLAT_CXXFLAGS="-fPIC -D_REENTRANT -D_GNU_SOURCE -pipe"
	CXXCOMMONLINKFLAGS=""
	CXXBINLINKFLAGS="-Wl,-Bdynamic -lpthread -Wl,-E $LDFLAGS"
	CBINLINKFLAGS="-Wl,-Bdynamic -lpthread $LDFLAGS"
	CXXSHAREDLIBLINKFLAGS='-shared -fPIC -Wl,-soname -Wl,$@.$(LIBRARY_BINARY_VERSION) -lpthread'
	PLAT_OPTFLAGS="-O3"
	LIB_EXT="so"
	STATIC_LINK_FLAGS="-Wl,-Bstatic"
	DYNAMIC_LINK_FLAGS="-Wl,-Bdynamic"
	DYNAMIC_EXPORT_FLAG=-Wl,--export-dynamic
	RPATH_LINK_FLAG="-Wl,-rpath="
	;;
*-*-netware*)
	AC_DEFINE(NETWARE, 1, Target OS is NetWare)
	AC_DEFINE(ENV_VAR_LIBPATH, "LD_LIBRARY_PATH", LD_LIBRARY_PATH env var gives path for finding shared libs)
	AC_SUBST(ENV_VAR_LIBPATH)	
	NETWARE=1
	PLATFORMDIR="posix"
	AC_DEFINE(USE_FAKE_LIBS, 1, Fake libraries are enabled)
	STATIC_SERVICES=1
	AC_DEFINE(STATIC_SERVICES, 1, Static services are enabled)
	CURRENT_LINK_MODE_FLAGS="$STATIC_LINK_FLAGS"
	BINLINKAPPENDFLAGS="$DYNAMIC_LINK_FLAGS"
	LIB_EXT="nlm"
	EXEEXT=".nlm"
	PLAT_CFLAGS="-DEXPERIMENTAL"
	PLAT_CXXFLAGS="-DEXPERIMENTAL"
	LIBS="$LIBS -lnetware"
	;;
#*-*-netbsd*)
#	;;
*-*-freebsd*)
	FREEBSD=1
	AC_DEFINE(FREEBSD)
	AC_DEFINE(ENV_VAR_LIBPATH, "LD_LIBRARY_PATH", LD_LIBRARY_PATH env var gives path for finding shared libs)
	AC_SUBST(ENV_VAR_LIBPATH)	
	PLAT_CFLAGS="-fPIC -D_REENTRANT -pipe -pthread"
	PLAT_CXXFLAGS="-fPIC -D_REENTRANT -pipe -pthread"
	CXXCOMMONLINKFLAGS="-pthread"
	CXXBINLINKFLAGS="-Wl,-Bdynamic -Wl,-E $LDFLAGS"
	CXXSHAREDLIBLINKFLAGS='-shared -fPIC -Wl,-soname -Wl,$@.$(LIBRARY_BINARY_VERSION)'
	PLAT_OPTFLAGS="-O3"
	LIB_EXT="so"
	;;
*-*-solaris*)
	SOLARIS=1
	AC_DEFINE(SOLARIS)
	AC_DEFINE(ENV_VAR_LIBPATH, "LD_LIBRARY_PATH", LD_LIBRARY_PATH env var gives path for finding shared libs)
	AC_SUBST(ENV_VAR_LIBPATH)	
	LIBS="$LIBS -lsocket -lnsl"
	PLAT_CFLAGS="-fPIC -pthreads -D_REENTRANT -D__EXTENSIONS__ -D_POSIX_PTHREAD_SEMANTICS"
	PLAT_CXXFLAGS="-fPIC -pthreads -D_REENTRANT -D__EXTENSIONS__ -D_POSIX_PTHREAD_SEMANTICS"
	CXXCOMMONLINKFLAGS="-pthreads $LDFLAGS"
	CXXBINLINKFLAGS="-Wl,-Bdynamic"
	CXXSHAREDLIBLINKFLAGS='-shared -fPIC -Wl,-h -Wl,$@.$(LIBRARY_BINARY_VERSION)'
	PLAT_OPTFLAGS="-O3"
	RPATH_LINK_FLAG="-R"
	LIB_EXT="so"
	REALTIME_LIBS="-lrt"
	;;
*-ncr-sysv*)
	NCR=1
	AC_DEFINE(NCR)
	PLAT_CFLAGS="-D_REENTRANT -D_GNU_SOURCE -DNCR_UST -pipe"
	PLAT_CXXFLAGS="-D_REENTRANT -D_GNU_SOURCE -DNCR_UST -pipe"
	CXXCOMMONLINKFLAGS=""
	CXXBINLINKFLAGS="-Wl,-Bdynamic -lpthread -lsocket -lnsl -lresolv -Wl,-E $LDFLAGS"
	CBINLINKFLAGS="-Wl,-Bdynamic -lpthread -lsocket -lnsl -lresolv $LDFLAGS"
	CXXSHAREDLIBLINKFLAGS='-shared -Wl,-soname -Wl,$@.$(LIBRARY_BINARY_VERSION) -lpthread'
	PLAT_OPTFLAGS="-O3"
	LIB_EXT="so"
	STATIC_LINK_FLAGS="-Wl,-Bstatic"
	DYNAMIC_LINK_FLAGS="-Wl,-Bdynamic"
	DYNAMIC_EXPORT_FLAG=-Wl,--export-dynamic
	RPATH_LINK_FLAG="-Wl,-rpath="
	;;
*)
	AC_MSG_WARN(***************************************************************************)
	AC_MSG_WARN(Unknown platform ($target). The build may fail. Using linux/gcc build flags.)
	AC_MSG_WARN(***************************************************************************)
	PLAT_CFLAGS="-fPIC -D_REENTRANT -D_GNU_SOURCE -pipe"
	PLAT_CXXFLAGS="-fPIC -D_REENTRANT -D_GNU_SOURCE -pipe"
	CXXCOMMONLINKFLAGS=""
	CXXBINLINKFLAGS="-Wl,-Bdynamic -lpthread -Wl,-E $LDFLAGS"
	CBINLINKFLAGS="-Wl,-Bdynamic -lpthread $LDFLAGS"
	CXXSHAREDLIBLINKFLAGS='-shared -fPIC -Wl,-soname -Wl,$@.$(LIBRARY_BINARY_VERSION) -lpthread'
	PLAT_OPTFLAGS="-O3"
	LIB_EXT="so"
	STATIC_LINK_FLAGS="-Wl,-Bstatic"
	DYNAMIC_LINK_FLAGS="-Wl,-Bdynamic"
	DYNAMIC_EXPORT_FLAG=-Wl,--export-dynamic
	RPATH_LINK_FLAG="-Wl,-rpath="
	;;
esac

#Figure out the architecture of the target platform
case "$target" in
i?86-*-*)
	AC_DEFINE(ARCH_X86, 1, Intel x86 architecture)
	;;
powerpc-*-*|powerpc-*-*-*|ppc-*-*)
	AC_DEFINE(ARCH_PPC, 1, PowerPC architecture)
	;;
ia64-*-*|ia64-*-*-*)
	AC_DEFINE(ARCH_IA64, 1, Itanium architecture)
	;;
powerpc64-*-*|powerpc64-*-*-*|ppc64-*-*)
	AC_DEFINE(ARCH_PPC64, 1, PowerPC64 architecture)
	;;
sparc-*-*)
	AC_DEFINE(ARCH_SPARC, 1, SPARC architecture)
	;;
hppa2.0*-*-*)
	AC_DEFINE(ARCH_HPPA20, 1, HP PA-RISC 2.0 architecture)
	;;
x86_64-*-*)
	AC_DEFINE(ARCH_X86_64, 1, x86-64 architecture)
	;;
s390-*-*|s390-*-*-*)
	AC_DEFINE(ARCH_S390, 1, s390 architecture)
	;;
s390x-*-*|s390x-*-*-*)
	AC_DEFINE(ARCH_S390X, 1, s390x architecture)
	;;
*)
	AC_DEFINE(ARCH_UNKNOWN, 1, Unknown architecture)
	;;
esac

# This figures out which compiler is invoked
BLOCXX_COMPILER=`basename $CXX`
case $BLOCXX_COMPILER in 
g++* | c++*)
	# Check for gcc versions which are known to be broken.
	GCC_COMPILER_VERSION=`$CXX --version | head -n1 | cut -f3 -d' '`
	case $GCC_COMPILER_VERSION in
	2.96 | 3.0*)
		AC_MSG_WARN(***************************************************************************)
		AC_MSG_WARN(This gcc compiler version ($GCC_COMPILER_VERSION) will fail.  Aborting now.)
		AC_MSG_WARN(***************************************************************************)
		exit 1;
		;;
	*)   
		# Let it pass.
		;;
	esac
esac

dnl This test is to avoid the stupid default of autoconf -g -O2
if test "x$USER_CFLAGS" = "x-g -O2"; then
	AC_MSG_NOTICE("Ignoring non-sensical default CFLAGS: -g -O2")
	CFLAGS="$PLAT_CFLAGS"
else
	AC_MSG_NOTICE("Using User CFLAGS: $USER_CFLAGS")
	CFLAGS="$PLAT_CFLAGS $USER_CFLAGS"
fi

if test "x$USER_CXXFLAGS" = "x-g -O2"; then
	AC_MSG_NOTICE("Ignoring non-sensical default CXXFLAGS: -g -O2")
	CXXFLAGS="$PLAT_CXXFLAGS"
else
	AC_MSG_NOTICE("Using User CXXFLAGS: $USER_CXXFLAGS")
	CXXFLAGS="$PLAT_CXXFLAGS $USER_CXXFLAGS"
fi

CPPFLAGS="$PLAT_CPPFLAGS $USER_CPPFLAGS"

BLOCXX_CHECK_COMPILER_FLAG(fno-enforce-eh-specs,
[
	# aCC passes the BLOCXX_CHECK_COMPILER_FLAG test for
	# -fno-enforce-eh-specs, because it will build and link if the flag
	# is givien, but it emits an anoying and useless warning. This
	# kludge eliminates that warning.
	if test "x$CXX" != "xaCC"; then 
		CXXFLAGS="-fno-enforce-eh-specs $CXXFLAGS"
	fi
])

# Set up the linker
if test -z "$CXXLINK" ; then
  CXXLINK="$CXX"
fi
if test -z "$CLINK" ; then
  CLINK="$CC"
fi

AC_SUBST(DYNAMIC_EXPORT_FLAG)
AC_SUBST(LIB_EXT)
AC_SUBST(REALTIME_LIBS)

AC_MSG_CHECKING(if special 64-bit flags should be added)
AC_ARG_ENABLE(64-bit-build,
BLOCXX_HELP_STRING(--enable-64-bit-build,enable building in 64-bit mode.  Only useful for platforms that support (or require) an option to enable 64-bit compilation.),
[
	if test "x$enable_64_bit_build" = xyes; then
		AC_MSG_RESULT(yes)
		# Yes, the user really did use --enable...
		if test "x$CFLAG_ADD_64_BIT" != "x" ; then
			# we even have something to add...
			CFLAGS="$CFLAGS $CFLAG_ADD_64_BIT"
			CXXFLAGS="$CXXFLAGS $CFLAG_ADD_64_BIT"
			CPPFLAGS="$CPPFLAGS $CFLAG_ADD_64_BIT"
			AC_MSG_NOTICE([Adding to C*FLAGS: $CFLAG_ADD_64_BIT])
		fi
		if test "x$LDFLAG_ADD_64_BIT" != "x" ; then
			LDFLAGS="$LDFLAGS $LDFLAG_ADD_64_BIT"
			AC_MSG_NOTICE([Adding to LDFLAGS: $LDFLAG_ADD_64_BIT])
		fi
		if test "x$RPATH_DEFAULT_PATH_64" != x ; then
			RPATH_DEFAULT_PATH="$RPATH_DEFAULT_PATH_64"
			AC_MSG_NOTICE([Replacing default rpath with: $RPATH_DEFAULT_PATH_64])
		fi
	else
		AC_MSG_RESULT(no)
	fi
],
[
	AC_MSG_RESULT([not specified (no)])
])

AC_ARG_ENABLE(rpath-link,
BLOCXX_HELP_STRING(--enable-rpath-link,enable the encoding of the destination library path into all executables for runtime linking),
[
	if test "x$RPATH_LINK_FLAG" != "x"; then
		RPATH_LINK_FLAG_REQUIRED=1
		dnl NOTE: Although the flags are required, they are NOT being enabled
		dnl in the configure script right here. This is because the libdir
		dnl variable expands to a variable that must be reevaluated. It is 
		dnl set at the bottom of this script (to prevent any tests from 
		dnl failing until it can be evaluated properly while running make).
	else
		AC_MSG_WARN(***************************************************************************)
		AC_MSG_WARN(rpath link cannot be enabled on this platform (the proper flag is unknown) -- ignored.)
		AC_MSG_WARN(***************************************************************************)
	fi
],[
	# This was already set, but it should be set again.
	RPATH_LINK_FLAG_REQUIRED=0
])

RPATH_LINK_FLAG_WITH_PATH=

AC_ARG_WITH(runtime-link-path,
BLOCXX_HELP_STRING(--with-runtime-link-path=PATH,enable the encoding of the specified library search path into all executables for runtime linking),
[
	if test "x$RPATH_LINK_FLAG" != "x"; then
		if test "x${with_runtime_link_path}" != "xyes" -a "x${with_runtime_link_path}" != "xno"; then
			RPATH_LINK_FLAG_WITH_PATH=$RPATH_LINK_FLAG${with_runtime_link_path}
			LDFLAGS="$LDFLAGS $RPATH_LINK_FLAG_WITH_PATH"
		elif test "x${with_runtime_link_path}" = "xyes"; then
			AC_MSG_WARN(***************************************************************************)
			AC_MSG_WARN(A runtime path must be specified when using --runtime-link-path            )
			AC_MSG_WARN(***************************************************************************)
			exit 1
		fi
	else
		if test "x${with_runtime_link_path}" = "xyes"; then
			AC_MSG_WARN(***************************************************************************)
			AC_MSG_WARN(The runtime link path flag is unknown on this platform -- ignored.         )
			AC_MSG_WARN(***************************************************************************)
		fi
	fi
])

AM_CONDITIONAL(USE_RPATH, test "x${RPATH_LINK_FLAG_REQUIRED}" = "x1" -a "x${RPATH_LINK_FLAG}" != "x")
AC_SUBST(RPATH_LINK_FLAG)
AC_SUBST(RPATH_LINK_FLAG_WITH_PATH)

dnl Checks for header files.
AC_HEADER_STDC

AM_CONDITIONAL(USE_AIX_AUTHENTICATE, test x$AIX = x1)

AM_CONDITIONAL(BLOCXX_NETWARE_INSTALL, test x$NETWARE = x1)

dnl Needed for monitor
AC_CHECK_FUNCS(setsid)
LO_CHECK_CMSGHDR
LO_CHECK_CMSG_LEN
dnl Check if msghdr{} has msg_control member.
AC_CHECK_MEMBER([struct msghdr.msg_control],
  AC_DEFINE(HAVE_MSGHDR_MSG_CONTROL, 1, define if struct msghdr contains the msg_control member),,
  [
    #include <sys/types.h>
    #include <sys/socket.h>
  ]
)

dnl On AIX (at least 5.2), <varargs.h> and <stdarg.h> have conflicting macros.
dnl These only seem to show up in C++, with xlC as the compiler.  Fortunately,
dnl there isn't much of a reason to include both, as the stdarg.h file will be
dnl preferred over the non-standard varargs.h
AC_CHECK_HEADERS(stdarg.h varargs.h)

# check for standard C++ headers
AC_LANG_CPLUSPLUS

dnl This will scan the headers and undefine the "availability" for anything
dnl that isn't possible to use in C++, if it was already detected as being
dnl available by some earlier test (autoconf does a bunch of automatic C 
dnl header tests).
BLOCXX_CHECK_CXX_HEADERS( \
pthread.h \
pth.h \
alloca.h \
arpa/inet.h \
byteswap.h \
dirent.h \
fcntl.h \
getopt.h \
grp.h \
inttypes.h \
limits.h \
netinet/in.h \
pthread.h \
pwd.h \
signal.h \
stropts.h \
sys/file.h \
sys/cdefs.h \
sys/epoll.h \
sys/int_types.h \
sys/param.h \
sys/poll.h \
sys/queue.h \
sys/resource.h \
sys/select.h \
sys/socket.h \
sys/sockio.h \
sys/stat.h \
sys/time.h \
sys/types.h \
sys/un.h \
sys/wait.h \
sys/ipc.h \
sys/sem.h \
unistd.h \
paths.h \
streambuf \
streambuf.h \
ostream \
ostream.h \
istream \
istream.h \
hash_map \
ext/hash_map \
cxxabi.h \
)

dnl On FreeBSD 4.9, <unistd.h> and <getopt.h> contain conflicting declarations
dnl    for getopt.
dnl This *MUST* be done while AC_LANG_CPLUSPLUS is set; the conflict does not occur in C;
dnl    It is C++ only.				
AC_MSG_CHECKING(if <unistd.h> and <getopt.h> conflict)
AC_TRY_COMPILE(
[
#include<getopt.h>
#include<unistd.h>
],
[
],
[
	AC_MSG_RESULT(no)
],
[
	AC_MSG_RESULT(yes)
	AC_DEFINE(GETOPT_AND_UNISTD_CONFLICT, 1, [Define to 1 if getopt and unistd conflict])
])

dnl On FreeBSD 4.9, WIFEXITED and WEXITSTATUS require wait.h .
AC_MSG_CHECKING(if WIFEXITED and WEXITSTATUS require <wait.h>)
AC_TRY_COMPILE(
[
],
[
	int i;
	int* status= &i;
	WIFEXITED(status);
	WEXITSTATUS(status);
],
[
	AC_MSG_RESULT(no)
],
[
	AC_MSG_RESULT(yes)
	AC_DEFINE(WIFEXITED_NEEDS_WAIT_H, 1, [Define to 1 if WIFEXITED and WEXITSTATUS require wait.h])
])

dnl bt_debug.c expects <inttypes.h> to #define PRIu32 and PRIx32 .
dnl Trouble is, whether <inttypes.h> #defines PRIu32 and PRIx32 is system dependent;
dnl linux <inttypes.h> does, FreeBSD and Darwin <inttypes.h> do not.
AC_MSG_CHECKING([does <inttypes.h> define PRIu32 and PRIx32?])
AC_TRY_COMPILE(
[
	#include <inttypes.h>
],
[
	char const* c= PRIu32;
	char const* d= PRIx32;
],
[
	AC_MSG_RESULT(yes)
	AC_DEFINE(INTTYPES_H_DEFINES_PRI, 1, [Define to 1 if <inttypes.h> defines PRIu32 and PRIx32.])
],
[
	AC_MSG_RESULT(no)
	AC_DEFINE(INTTYPES_H_DOES_NOT_DEFINE_PRI, 1, [Define to 1 if <inttypes.h> does not define PRIu32 or PRIx32.])
])
				
dnl See if the C++ compiler supports __PRETTY_FUNCTION__
AC_MSG_CHECKING(if the C++ compiler supports __PRETTY_FUNCTION__)
AC_TRY_COMPILE(
[
],
[
	const char* f = __PRETTY_FUNCTION__;
],
[
	AC_MSG_RESULT(yes)
	AC_DEFINE(HAVE_UUPRETTY_FUNCTIONUU, 1, [Define to 1 if the C++ compiler supports __PRETTY_FUNCTION__])
],
[
	AC_MSG_RESULT(no)
])

dnl See if the C++ compiler supports the C99 __func__
AC_MSG_CHECKING(if the C++ compiler supports the C99 __func__)
AC_TRY_COMPILE(
[
],
[
	const char* f = __func__;
],
[
	AC_MSG_RESULT(yes)
	AC_DEFINE(HAVE_C99_UUFUNCUU, 1, [Define to 1 if the C++ compiler supports the C99 __func__])
],
[
	AC_MSG_RESULT(no)
])

AC_MSG_CHECKING(for setresgid prototype)
AC_TRY_COMPILE(
[
	#include <stdlib.h>
],
[
	setresgid(0,0,0);
],
[
	AC_MSG_RESULT(yes) 
],
[ 
	AC_MSG_RESULT(no) 
	AC_DEFINE(NO_SETRESGID_PROTO, 1, [Define to 1 if the setresgid prototype is missing])
])

AC_MSG_CHECKING(for setresuid prototype)
AC_TRY_COMPILE(
[
	#include <stdlib.h>
],
[
	setresuid(0,0,0);
],
[
	AC_MSG_RESULT(yes) 
],
[ 
	AC_MSG_RESULT(no) 
	AC_DEFINE(NO_SETRESUID_PROTO, 1, [Define to 1 if the setresuid prototype is missing])
])

dnl See if the C++ compiler supports std::tr1::is_pod<> correctly
AC_MSG_CHECKING(if the C++ compiler supports std::tr1::is_pod<> correctly)
AC_TRY_COMPILE(
[
#include <tr1/type_traits>
template <bool x> struct StaticAssertionFailure;

template <>
struct StaticAssertionFailure<true>
{
};

#define BLOCXX_STATIC_ASSERT_CAT(a, b) a ## b
#define BLOCXX_STATIC_ASSERT_AUX(a, b) BLOCXX_STATIC_ASSERT_CAT(a, b)

#define BLOCXX_STATIC_ASSERT( B ) \
enum { \
	BLOCXX_STATIC_ASSERT_AUX(blocxx_static_assert_enum_, __LINE__) \
	= sizeof( StaticAssertionFailure< (bool)( B ) > ) \
}

struct POD
{
	int x;
	int y;
};

BLOCXX_STATIC_ASSERT(std::tr1::is_pod<POD>::value == true);

class nonPOD
{
private:
	nonPOD();
	nonPOD(const nonPOD& x);
	int x;
};

BLOCXX_STATIC_ASSERT(std::tr1::is_pod<nonPOD>::value == false);
	
],
[
],
[
	AC_MSG_RESULT(yes)
	AC_DEFINE(HAVE_STD_TR1_IS_POD, 1, [Define to 1 if the C++ compiler supports std::tr1::is_pod<>])
],
[
	AC_MSG_RESULT(no)
])

dnl See if the C++ compiler supports wstring
AC_MSG_CHECKING(if the C++ compiler supports wstring)
AC_TRY_COMPILE(
[
	#include <string>
],
[
	std::wstring s;
],
[
	AC_MSG_RESULT(yes)
	AC_DEFINE(HAVE_STD_WSTRING, 1, [Define to 1 if the C++ compiler supports std::wstring])
],
[
	AC_MSG_RESULT(no)
])

AC_LANG_C

AC_CHECK_FUNCS(getopt_long sched_yield backtrace nanosleep \
mkstemp snprintf random srandom asctime_r gmtime_r localtime_r gettimeofday \
timegm getpwnam_r getpwuid_r strtof setrlimit setregid setreuid seteuid \
setegid)

AC_CHECK_FUNCS(setresuid, [
    dnl Some platorms have setresuid that isn't implemented, test for this
    AC_MSG_CHECKING(if setresuid seems to work)
    AC_RUN_IFELSE(
        [AC_LANG_SOURCE([[
#include <stdlib.h>
#include <errno.h>
int main(){errno=0; setresuid(0,0,0); if (errno==ENOSYS) exit(1); else exit(0);}
        ]])],
        [AC_MSG_RESULT(yes)],
        [AC_DEFINE(BROKEN_SETRESUID, 1, [setresuid() is broken])
         AC_MSG_RESULT(not implemented)],
        [AC_MSG_WARN([cross compiling: not checking setresuid])]
    )
])

AC_CHECK_FUNCS(setresgid, [
    dnl Some platorms have setresgid that isn't implemented, test for this
    AC_MSG_CHECKING(if setresgid seems to work)
    AC_RUN_IFELSE(
        [AC_LANG_SOURCE([[
#include <stdlib.h>
#include <errno.h>
int main(){errno=0; setresgid(0,0,0); if (errno==ENOSYS) exit(1); else exit(0);}
        ]])],
        [AC_MSG_RESULT(yes)],
        [AC_DEFINE(BROKEN_SETRESGID, 1, [setresgid() is broken])
         AC_MSG_RESULT(not implemented)],
        [AC_MSG_WARN([cross compiling: not checking setresgid])]
    )
])

dnl Test for pthread_atfork(), since some versions of glibc are broken and have a prototype but no function.
if test ".${ac_cv_header_pthread_h}" = ".yes"; then
	AC_MSG_CHECKING([for pthread_atfork])
	AC_TRY_LINK([
		#include "confdefs.h"
		#include <pthread.h>],
		[pthread_atfork(NULL, NULL, NULL);],
		AC_DEFINE_UNQUOTED(HAVE_PTHREAD_ATFORK, 1, [pthread_atfork() exists])
		AC_MSG_RESULT(yes)
		ac_has_pthread_atfork=yes,
		AC_MSG_RESULT(no)
		ac_has_pthread_atfork=no)
else
	ac_has_pthread_atfork=no
fi

dnl This horrible mess is here because there are variations in the number of
dnl parameters that gethostbyname_r takes on various platforms.  The general
dnl idea for this came from the python configure script.
AC_CHECK_FUNC(gethostbyname_r, 
[
  dnl the 6 arg version is the way Linux does it.
  AC_MSG_CHECKING(if gethostbyname_r takes 6 args)
  AC_TRY_COMPILE(
  [
#include <netdb.h>
  ],
  [ 
    const char* hostname = "IGNOREME";
    struct hostent hostbuf;
    struct hostent* host = &hostbuf;
    char buf[2048];
    int localh_errno = 0;

    (void) gethostbyname_r(hostname, &hostbuf, buf, sizeof(buf), &host, &localh_errno);
  ],
  dnl Yes, it takes 6 args
  [
    AC_MSG_RESULT(yes)
    AC_DEFINE(HAVE_GETHOSTBYNAME_R, 1, Have gethostbyname_r())
    AC_DEFINE(GETHOSTBYNAME_R_ARGUMENTS, 6, Number of args to gethostbyname_r())
  ],
  dnl else (not 6 args)
  [
    AC_MSG_RESULT(no)
    dnl The 3 arg version is the way AIX does it.
    AC_MSG_CHECKING(if gethostbyname_r takes 3 args)
    AC_TRY_COMPILE(
    [
#include <netdb.h>
    ],
    [
      const char* hostname = "IGNOREME";
      struct hostent hostbuf;
      struct hostent_data hostdata;
      
      (void) gethostbyname_r(hostname, &hostbuf, &hostdata);
    ],
    dnl Yes, it takes 3 args
    [
      AC_MSG_RESULT(yes)
      AC_DEFINE(HAVE_GETHOSTBYNAME_R, 1, Have gethostbyname_r())
      AC_DEFINE(GETHOSTBYNAME_R_ARGUMENTS, 3, Number of args to gethostbyname_r())
    ],
    dnl else (not 3 arg)
    [
      AC_MSG_RESULT(no)
      dnl This was taken from the python source, as I don't know what platforms
      dnl it is correct on.
      AC_MSG_CHECKING(if gethostbyname_r takes 5 args)
      AC_TRY_COMPILE(
      [
#include <netdb.h>
      ],
      [
        const char* name = "IGNOREME";
	struct hostent *he;
	char buffer[2048];
	int localh_errno = 0;
	(void) gethostbyname_r(name, he, buffer, sizeof(buffer), &localh_errno);
      ],
      dnl Yes, it takes 5 args
      [
        AC_MSG_RESULT(yes)
        AC_DEFINE(HAVE_GETHOSTBYNAME_R, 1, Have gethostbyname_r())
        AC_DEFINE(GETHOSTBYNAME_R_ARGUMENTS, 5, Number of args to gethostbyname_r())
      ],
      dnl else (Who knows?)
      [
        AC_MSG_RESULT(no)
      ] )
    ] )
  ] )
] )
dnl end of gethostbyname_r checks.

dnl Check for the sighandler_t type
AC_CHECK_TYPES([sighandler_t], , ,[#include <signal.h>])
dnl Check for sigval or sigval_t typedefs (normal, struct, or union)
AC_CHECK_TYPES([sigval],[AC_DEFINE(SIGVAL_TYPE, sigval, The sigval type)], 
  AC_CHECK_TYPES([union sigval],[AC_DEFINE(SIGVAL_TYPE, union sigval, The sigval type)], 
    AC_CHECK_TYPES([struct sigval],[AC_DEFINE(SIGVAL_TYPE, struct sigval, The sigval type)], 
      AC_CHECK_TYPES([sigval_t],[AC_DEFINE(SIGVAL_TYPE, sigval_t, The sigval type)], 
        AC_CHECK_TYPES([union sigval_t],[AC_DEFINE(SIGVAL_TYPE, union sigval_t, The sigval type)], 
          AC_CHECK_TYPES([struct sigval_t],[AC_DEFINE(SIGVAL_TYPE, struct sigval_t, The sigval type)], ,[#include <signal.h>])
        ,[#include <signal.h>])
      ,[#include <signal.h>])
    ,[#include <signal.h>])
  ,[#include <signal.h>])
,[#include <signal.h>])

dnl Check the existance of strsignal.
AC_CHECK_FUNCS(strsignal)

dnl Check the availability siginfo_t and sigval_t members.
dnl If *all* of the above SIGVAL_TYPE checks failed, then tests for members of
dnl those types will fail here (as they should)
AC_CHECK_MEMBERS([siginfo_t.si_fd, SIGVAL_TYPE.sival_int, SIGVAL_TYPE.sigval_int], , ,[#include <signal.h>])

dnl Check for sigwaitinfo and sigtimedwait
AC_CHECK_DECLS([sigwaitinfo, sigtimedwait], [], [], [#include <signal.h>])

# Check for some standard paths (not present on some busted operating systems).
AC_CHECK_DECLS([_PATH_DEFPATH, _PATH_STDPATH], [], [], [#include <paths.h>])

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_BIGENDIAN

AC_CHECK_SIZEOF(char, 1)
AC_CHECK_SIZEOF(short int, 2)
AC_CHECK_SIZEOF(int, 4)
AC_CHECK_SIZEOF(long int, 4)
AC_CHECK_SIZEOF(long long int, 8)
AC_CHECK_SIZEOF(float, 4)
AC_CHECK_SIZEOF(double, 8)
AC_CHECK_SIZEOF(long double, 8)
AC_CHECK_SIZEOF(char *, 4)

dnl Posix does not require 'pthread_t' to mean anything unless <pthread.h> is
dnl   #included, so some of our platforms, like FreeBSD, do not provide
dnl   pthread_t unless <pthread.h> is #included.
AC_CHECK_SIZEOF(pthread_t, 0, [#include <pthread.h>])


AC_TYPE_OFF_T
AC_TYPE_SIZE_T
AC_CHECK_TYPE(u_int8_t, uint8_t)
AC_CHECK_TYPE(u_int16_t, uint16_t)
AC_CHECK_TYPE(u_int32_t, uint32_t)
AC_STRUCT_ST_BLKSIZE
AC_DECL_SYS_SIGLIST
TYPE_SOCKLEN_T
AC_CHECK_TYPES([struct timeval, struct timespec], , , 
  [
    #include <time.h> 
    #include <sys/time.h>
  ])

dnl Checks for library functions
AC_FUNC_MEMCMP
AC_FUNC_MMAP
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(strerror strtoll strtoull)

dnl Check for dynamic library loader functionality
AC_CHECK_FUNCS(NSLinkModule, [ tempdl="dyld" ], [ tempdl="no" ])
#if test "$tempdl" = "no"; then
#  AC_CHECK_LIB(dld, shl_load, [ tempdl="shl"; DL_LIB="-ldld" ], [ tempdl="no" ])
#fi
if test "$tempdl" = "no"; then
  AC_CHECK_FUNCS(dlopen, [ tempdl="dlfcn" ], [ tempdl="no" ])
fi
if test "$tempdl" = "no"; then
  AC_CHECK_LIB(dl, dlopen, [ tempdl="dlfcn"; DL_LIB="-ldl" ], [ tempdl="no" ])
fi
case "$tempdl" in
  dlfcn) AC_DEFINE(USE_DL);;
  shl)   AC_DEFINE(USE_SHL);;
  dyld)  AC_DEFINE(USE_DYLD);;
esac

AC_SUBST(DL_LIB)

dnl Figure out which compiler flags can be used
BLOCXX_CHECK_COMPILER_FLAG(Wall,[CXXFLAGS="$CXXFLAGS -Wall"])
BLOCXX_CHECK_COMPILER_FLAG(W,[CXXFLAGS="$CXXFLAGS -W"])
BLOCXX_CHECK_COMPILER_FLAG(Woverloaded-virtual,[CXXFLAGS="$CXXFLAGS -Woverloaded-virtual"])
BLOCXX_CHECK_COMPILER_FLAG(Wno-unused,[CXXFLAGS="$CXXFLAGS -Wno-unused"])
BLOCXX_CHECK_COMPILER_FLAG(Wno-unused-label,[CXXFLAGS="$CXXFLAGS -Wno-unused-label"])
BLOCXX_CHECK_COMPILER_FLAG(Wno-unused-parameter,[CXXFLAGS="$CXXFLAGS -Wno-unused-parameter"])
BLOCXX_CHECK_COMPILER_FLAG(Wno-long-long,[CXXFLAGS="$CXXFLAGS -Wno-long-long"])
BLOCXX_CHECK_COMPILER_FLAG(Wwrite-strings,[CXXFLAGS="$CXXFLAGS -Wwrite-strings"])
BLOCXX_CHECK_COMPILER_FLAG(Wextra,[CXXFLAGS="$CXXFLAGS -Wextra"])
BLOCXX_CHECK_COMPILER_FLAG(Wabi,[CXXFLAGS="$CXXFLAGS -Wabi"])
if test "x$BLOCXX_NO_WDEPRECATED" = "x1"; then
	# For OS X which doesn't correctly handle __attribute__(deprecated), so we turn it off
	BLOCXX_CHECK_COMPILER_FLAG(Wno-deprecated,[CXXFLAGS="$CXXFLAGS -Wno-deprecated"])
fi
dnl I wish we could enable this, but unfortunately network macros cause it to blow chunks.
dnl	BLOCXX_CHECK_COMPILER_FLAG(Wold-style-cast,[CXXFLAGS="$CXXFLAGS -Wold-style-cast"])

dnl now handle all the --enable configure arguments
AC_ARG_ENABLE(debug-mode,
BLOCXX_HELP_STRING(--enable-debug-mode,enable debugging mode),
[
	AC_DEFINE(DEBUG)
	AC_DEFINE(_GLIBCXX_DEBUG)
	CFLAGS="$CFLAGS -g"
	CXXFLAGS="$CXXFLAGS -g -D_GLIBCXX_DEBUG"
	CXXBINLINKFLAGS="$CXXBINLINKFLAGS -g"
	CXXSHAREDLIBLINKFLAGS="$CXXSHAREDLIBLINKFLAGS -g"

],[
	CFLAGS="$CFLAGS -DNDEBUG $PLAT_OPTFLAGS"
	CXXFLAGS="$CXXFLAGS -DNDEBUG $PLAT_OPTFLAGS"
	# SUSE ships with some experimental gcc optimization patches, and the -fweb option gets enabled 
	# at -O3 causes some of the libdb code (thus only CFLAGS are set) to be miscompiled.
	BLOCXX_CHECK_COMPILER_FLAG(fno-web,[CFLAGS="$CFLAGS -fno-web"])
])

dnl Check to see if fake libraries and static services are requested.
AC_ARG_ENABLE(fake-libs,
BLOCXX_HELP_STRING(--enable-fake-libs,enable fake libraries (required for static services)),
[ 
  USE_FAKE_LIBS=1
  AC_DEFINE(USE_FAKE_LIBS, 1, Fake libraries are enabled)
])

AC_ARG_ENABLE(static-services,
BLOCXX_HELP_STRING(--enable-static-services,force services to be statically linked (auto-enables fake libraries)),
[ 
  if test "x$USE_FAKE_LIBS" = "x"; then
    echo "Enabling fake libraries."
    AC_DEFINE(USE_FAKE_LIBS, 1, Fake libraries are enabled)
  fi
  STATIC_SERVICES=1
  AC_DEFINE(STATIC_SERVICES, 1, Static services are enabled)
  CURRENT_LINK_MODE_FLAGS="$STATIC_LINK_FLAGS"
  BINLINKAPPENDFLAGS="$DYNAMIC_LINK_FLAGS"
], [
  CURRENT_LINK_MODE_FLAGS="$DYNAMIC_LINK_FLAGS"
  BINLINKAPPENDFLAGS=""
])
CXXBINLINKFLAGS="$CURRENT_LINK_MODE_FLAGS $CXXBINLINKFLAGS $CURRENT_LINK_MODE_FLAGS"
CBINLINKFLAGS="$CURRENT_LINK_MODE_FLAGS $CBINLINKFLAGS $CURRENT_LINK_MODE_FLAGS"
# A bunch of platform-specific automake conditionals.
AM_CONDITIONAL(AIX, test "x$AIX" != "x")
AM_CONDITIONAL(DARWIN, test "x$DARWIN" != "x")
AM_CONDITIONAL(FREEBSD, test "x$FREEBSD" != "x")
AM_CONDITIONAL(HPUX, test "x$HPUX" != "x")
AM_CONDITIONAL(LINUX, test "x$LINUX" != "x")
AM_CONDITIONAL(NETWARE, test "x$NETWARE" != "x")
AM_CONDITIONAL(SOLARIS, test "x$SOLARIS" != "x")
AC_SUBST(STATIC_LINK_FLAGS)
AC_SUBST(DYNAMIC_LINK_FLAGS)
AC_SUBST(STATIC_SERVICES)
AM_CONDITIONAL(BLOCXX_STATIC_LINKING, test "x$STATIC_SERVICES" != "x")
AC_SUBST(CURRENT_LINK_MODE_FLAGS)
AC_SUBST(BINLINKAPPENDFLAGS)

VERSIONED_LIB_EXT=${LIB_EXT}.${LIBRARY_VERSION}
if test x${STATIC_SERVICES} = x1; then
	VERSIONED_LIB_EXT=${LIB_EXT}
elif test x${DARWIN} = x1; then
	VERSIONED_LIB_EXT=${LIBRARY_VERSION}.${LIB_EXT}
fi
AC_SUBST(VERSIONED_LIB_EXT)

AC_ARG_ENABLE(openslp,
BLOCXX_HELP_STRING(--disable-openslp,disable openslp integration))

AC_ARG_ENABLE(memory-debug-mode,
BLOCXX_HELP_STRING(--enable-memory-debug-mode,enable memory debug mode),
[
	AC_DEFINE(DEBUG_MEMORY)
])

AC_ARG_ENABLE(func-name-debug-mode,
BLOCXX_HELP_STRING(--enable-func-name-debug-mode,enable func name debug mode),
[
	AC_DEFINE(PRINT_FUNC_DEBUG)
])


AC_ARG_ENABLE(stack-trace,
	BLOCXX_HELP_STRING(--enable-stack-trace,enable stack trace on exceptions. This 
		incurs a performance penalty, and so may only be appropriate for 
		debugging during development.),
[
	AC_DEFINE(ENABLE_STACK_TRACE_ON_EXCEPTIONS)
])

AC_ARG_ENABLE(check-null-references,
BLOCXX_HELP_STRING(--disable-check-null-references,disable checking for NULL references))

if test "$enable_check_null_references" != no; then
	AC_DEFINE(CHECK_NULL_REFERENCES)
fi

AC_ARG_ENABLE(check-array-indexing,
BLOCXX_HELP_STRING(--disable-check-array-indexing,disable checking valid array indexes))

if test "$enable_check_array_indexing" != no; then
	AC_DEFINE(CHECK_ARRAY_INDEXING)
fi

AC_ARG_ENABLE(valgrind-support,
BLOCXX_HELP_STRING(--enable-valgrind-support,enable workarounds so the code can work well with valgrind),
[
	AC_DEFINE(VALGRIND_SUPPORT)
])

AC_ARG_ENABLE(non-thread-safe-exception-handling-workaround,
BLOCXX_HELP_STRING(--enable-non-thread-safe-exception-handling-workaround,enable workarounds for non thread safe exception handling),
[
	AC_DEFINE(NON_THREAD_SAFE_EXCEPTION_HANDLING)
])

AC_ARG_WITH(package-prefix,
	BLOCXX_HELP_STRING(--with-package-prefix=PREFIX,specify an optional prefix for 
		use when building a commercial version of BloCxx.  This allows separate 
		versions to simultaneously coexist.),
	[
		PACKAGE_PREFIX=${with_package_prefix}
		PACKAGE_PREFIX_D=${with_package_prefix}-
	],
	[
		PACKAGE_PREFIX=
		PACKAGE_PREFIX_D=
	]
)
AC_SUBST(PACKAGE_PREFIX)
AC_SUBST(PACKAGE_PREFIX_D)
AC_DEFINE_UNQUOTED(PACKAGE_PREFIX, "$PACKAGE_PREFIX")

dnl Detect iconv and handle any --enable or --disable option for it.
dnl NOTE: This should be disabled on HP-UX because iconv has some weird linking
dnl requirements. See the iconv(3C) man page for details.
HAVE_ICONV_SUPPORT=0
AC_LANG_CPLUSPLUS
BLOCXX_ENABLE_SUPPORT([iconv],
	[
		BLOCXX_CHECK_CXX_HEADERS([iconv.h],
			[ HAVE_ICONV_SUPPORT=1 ],
			[ AC_MSG_ERROR(Support for iconv is not possible without iconv.h) ]
		)
	],
	[ HAVE_ICONV_SUPPORT=0 ],
	[ BLOCXX_CHECK_CXX_HEADERS([iconv.h], [HAVE_ICONV_SUPPORT=1]) ]
)

if test x$HAVE_ICONV_SUPPORT = x1 ; then
	dnl Check the libraries needed for iconv.  On many (most?) platforms, this will
	dnl be nothing, and the -lc won't be used.  On other platforms, -liconv is
	dnl needed.
	LIBS_icsaved="$LIBS"
	AC_CHECK_LIB(c, iconv_open,
		[
			dnl Use whatever was defined previously for ICONV_LIB.  This should be
			dnl empty, unless explicitly overridden.
			ICONV_LIB="$ICONV_LIB"
		],
		[
			AC_CHECK_LIB(iconv, iconv_open,
				[ ICONV_LIB="-liconv" ],
				[
					if test x$enable_iconv != xautodetect; then
						AC_MSG_ERROR(Support for iconv was requested but the proper library cannot be found)
					fi
				]
			)
		]
	)
	LIBS="$LIBS_icsaved"

	AC_MSG_CHECKING(if the iconv inbuf parameter type is const char**)
	AC_TRY_COMPILE(
	[
		#include <iconv.h>
	],
	[
		const char *inbuf = 0;
		char* outbuf = 0;
		size_t bytes = 0;
		iconv_t cd;
		iconv(cd, &inbuf, &bytes, &outbuf, &bytes);
	],
	[
		AC_MSG_RESULT(yes)
		AC_DEFINE(ICONV_INBUF_CONST, 1, [Define to 1 if the iconv inbuf parameter type is const char**])
	],
	[
		AC_MSG_RESULT(no)
	])
	AC_DEFINE(HAVE_ICONV_SUPPORT, 1, [Define to 1 if iconv is supported])
fi
AC_SUBST(ICONV_LIB)
AM_CONDITIONAL(HAVE_ICONV_SUPPORT, test x$HAVE_ICONV_SUPPORT = x1)
AC_LANG_C


dnl for now everything that uses the configure script uses pthreads
AC_DEFINE(USE_PTHREAD)

AC_ARG_WITH(search-dir,
	BLOCXX_HELP_STRING(--with-search-dir=PATH,specify an additional directory to look for include/ and lib/ sub dirs),
	[
		if test "x$withval" != "xno" ; then
			CPPFLAGS="$CPPFLAGS -I$withval/include" 
			LDFLAGS="$LDFLAGS -L$withval/lib" 
		fi
	]
)

# The big search for OpenSSL.  Thanks to the openssh configure.in file!
saved_LDFLAGS="$LDFLAGS"
saved_CPPFLAGS="$CPPFLAGS"
saved_LIBS="$LIBS"

AC_ARG_WITH(ssl-dir,
	BLOCXX_HELP_STRING(--with-ssl-dir=PATH,specify path to OpenSSL installation),
[
	if test "x$withval" != "xno" ; then
		tryssldir=$withval
	fi
]
)

if test "x$prefix" != "xNONE" ; then
	tryssldir="$tryssldir $prefix"
fi
AC_CACHE_CHECK([for OpenSSL directory], ac_cv_openssldir, [
	for ssldir in $tryssldir "" /usr/local/openssl /usr/lib/openssl /usr/local/ssl /usr/lib/ssl /usr/local /usr/pkg /opt /opt/openssl ; do
		CPPFLAGS="$saved_CPPFLAGS"
		LDFLAGS="$saved_LDFLAGS"
		SSL_LIBS="-lssl -lcrypto"
		LIBS="$saved_LIBS $SSL_LIBS"
 
		# Skip directories if they don't exist
		if test ! -z "$ssldir" -a ! -d "$ssldir" ; then
			continue;
		fi
		if test ! -z "$ssldir" -a "x$ssldir" != "x/usr"; then
			# Try to use $ssldir/lib if it exists, otherwise
			# $ssldir
			if test -d "$ssldir/lib" ; then
				LDFLAGS="$saved_LDFLAGS -L$ssldir/lib"
				if test "x$RPATH_LINK_FLAG_REQUIRED" = "x1" ; then
					LDFLAGS="$LDFLAGS ${RPATH_LINK_FLAG}$ssldir/lib"
				fi
			else
				LDFLAGS="$saved_LDFLAGS -L$ssldir"
				if test "x$RPATH_LINK_FLAG_REQUIRED" = "x1" ; then
					LDFLAGS="$LDFLAGS ${RPATH_LINK_FLAG}$ssldir"
				fi
			fi
			# Try to use $ssldir/include if it exists, otherwise
			# $ssldir
			if test -d "$ssldir/include" ; then
				CPPFLAGS="$saved_CPPFLAGS -I$ssldir/include"
			else
				CPPFLAGS="$saved_CPPFLAGS -I$ssldir"
			fi
		fi
 
		# Basic test to check for compatible version and correct linking
		# *does not* test for RSA - that comes later.
		AC_TRY_COMPILE(
		[
#include <string.h>
#include <openssl/rand.h>
		],
		[
	char a[2048];
	memset(a, 0, sizeof(a));
	RAND_add(a, sizeof(a), sizeof(a));
	return(RAND_status() <= 0);
		],
		[
			found_crypto=1
			break;
		], 
		[
			did_not_find_crypt=0
		] 
		)
 
		if test ! -z "$found_crypto" ; then
			break;
		fi
	done
 
	if test -z "$found_crypto" ; then
		#AC_MSG_ERROR([Could not find working OpenSSL library, please install or check config.log])
		ssldir=""
	fi
	if test -z "$ssldir" && test ! -z "$found_crypto"; then
		ssldir="(system)"
	fi
 
	ac_cv_openssldir=$ssldir
])

if (test ! -z "$ac_cv_openssldir") ; then
	AC_DEFINE(HAVE_OPENSSL)
	SSL_LIBS="-lssl -lcrypto"
	LIBS="$saved_LIBS"
else
	AC_MSG_ERROR([OpenSSL not found])
fi

if (test ! -z "$ac_cv_openssldir" && test "x$ac_cv_openssldir" != "x(system)") ; then
	dnl Need to recover ssldir - test above runs in subshell
	ssldir=$ac_cv_openssldir
	if test ! -z "$ssldir" -a "x$ssldir" != "x/usr"; then
		# Try to use $ssldir/lib if it exists, otherwise
		# $ssldir
		if test -d "$ssldir/lib" ; then
			LDFLAGS="$saved_LDFLAGS -L$ssldir/lib"
			if test "x$RPATH_LINK_FLAG_REQUIRED" = "x1" ; then
				LDFLAGS="$LDFLAGS ${RPATH_LINK_FLAG}$ssldir/lib"
			fi
		else
			LDFLAGS="$saved_LDFLAGS -L$ssldir"
			if test "x$RPATH_LINK_FLAG_REQUIRED" = "x1" ; then
				LDFLAGS="$LDFLAGS ${RPATH_LINK_FLAG}$ssldir"
			fi
		fi
		# Try to use $ssldir/include if it exists, otherwise
		# $ssldir
		if test -d "$ssldir/include" ; then
			CPPFLAGS="$saved_CPPFLAGS -I$ssldir/include"
		else
			CPPFLAGS="$saved_CPPFLAGS -I$ssldir"
		fi
	fi
	SSL_LIBS="-lssl -lcrypto"
fi

dnl
dnl   Fix this section, to make it more 'autoconfish', as this is just a chunk
dnl   of a bourne-style shell script 
dnl
dnl   Note: This chunk of tests was added because Redhat includes dependencies
dnl   to kerberos in their compilation of the openSSL libraries.  To allow
dnl   things to compile happily, we need to include the proper directories and
dnl   libraries (as is set in pkg-config openssl --cflags --libs)
dnl
dnl
AC_MSG_CHECKING([For additional SSL dependencies])
dnl Make sure that pkg-config exists.
if pkg-config --version >/dev/null 2>&1
then
	if pkg-config openssl >/dev/null 2>&1
	then
		EXTRA_SSL_LIBS=""
		#EXTRA_SSL_LIBS=`pkg-config openssl --libs`
		EXTRA_SSL_INCLUDES=`pkg-config openssl --cflags`
		CPPFLAGS="$CPPFLAGS $EXTRA_SSL_INCLUDES"
		SSL_LIBS="$SSL_LIBS $EXTRA_SSL_LIBS"
		AC_MSG_RESULT("$EXTRA_SSL_INCLUDES $EXTRA_SSL_LIBS");
		PKG_CONF_REQUIRES="${PKG_CONF_REQUIRES} openssl"
	else
		AC_MSG_RESULT(None)
	fi
else
	AC_MSG_RESULT([None (pkg-config not found)])
fi

AC_SUBST(SSL_LIBS)

dnl End of the ssl check

dnl Now check for threading stuff
OLD_LIBS=$LIBS
if [[ "x$DO_NOT_USE_DASH_PTHREAD" = "x" ]]
then
  # Always link pthread dynamically.
  LIBS="$DYNAMIC_LINK_FLAGS -pthread $CURRENT_LINK_MODE_FLAGS $LIBS"
fi
AC_MSG_CHECKING("pthread_mutexattr_settype")
AC_TRY_COMPILE(
	[
#include <pthread.h>
#include <assert.h>
	],
	[
	pthread_mutexattr_t attr;
	pthread_mutex_t mutex;
	int res = 0;
	res = pthread_mutexattr_init(&attr);
	assert(res == 0);
	res = pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_RECURSIVE);
	assert(res == 0);
	res = pthread_mutex_init(&mutex, &attr);
	assert(res == 0);
	return 0;
	],
	[
		AC_DEFINE(HAVE_PTHREAD_MUTEXATTR_SETTYPE)
		AC_MSG_RESULT("yes")
	],
	[ AC_MSG_RESULT("no") ]
)
dnl   Duplicate of checking pthread_mutexattr_settype for NCR system because of
dnl   other function names
AC_MSG_CHECKING("pthread_mutexattr_settype")
AC_TRY_COMPILE(
	[
#define NCR_UST
#include <pthread.h>
#include <assert.h>
	],
	[
	pthread_mutexattr_t attr;
	pthread_mutex_t mutex;
	int res = 0;
	res = pthread_mutexattr_create(&attr);
	assert(res == 0);
	res = pthread_mutexattr_setkind_np(&attr, MUTEX_RECURSIVE_NP);
	assert(res == 0);
	res = pthread_mutex_init(&mutex, attr);
	assert(res == 0);
	return 0;
	],
	[
		AC_DEFINE(HAVE_PTHREAD_MUTEXATTR_SETTYPE)
		AC_MSG_RESULT("yes")
	],
	[ AC_MSG_RESULT("no") ]
)

AC_MSG_CHECKING("pthread_spin_lock")
AC_TRY_COMPILE(
	[
#include <pthread.h>
#include <assert.h>
	],
	[
	pthread_spinlock_t spinlock;
	if (pthread_spin_init(&spinlock, 0) != 0)
		return 1;
	if (pthread_spin_lock(&spinlock) != 0)
		return 1;
	if (pthread_spin_unlock(&spinlock) != 0)
		return 1;
	return 0;
	],
	[
		AC_DEFINE(HAVE_PTHREAD_SPIN_LOCK)
		AC_MSG_RESULT("yes")
	],
	[ AC_MSG_RESULT("no") ]
)

AC_MSG_CHECKING("pthread_barrier_init")
AC_TRY_COMPILE(
	[
#include <pthread.h>
#include <assert.h>
	],
	[
	pthread_barrier_t barrier;
	assert(pthread_barrier_init(&barrier, NULL, 1) == 0);
	assert(pthread_barrier_wait(&barrier) == PTHREAD_BARRIER_SERIAL_THREAD);
	assert(pthread_barrier_destroy(&barrier) == 0);
	return 0;
	],
	[
		AC_DEFINE(HAVE_PTHREAD_BARRIER)
		AC_MSG_RESULT("yes")
	],
	[ AC_MSG_RESULT("no") ]
)

AC_CHECK_FUNCS(pthread_kill_other_threads_np)

# on older linux thread libraries the thread that waits on
# a process must be same thread that forked it.
if test "x$LINUX" = "x1"; then
AC_MSG_CHECKING(for old thread library)
AC_TRY_RUN(
[
#include <pthread.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <sys/time.h>
#include <errno.h>
#include <unistd.h>

pthread_mutex_t g_pidMutex = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t g_pidSetCond = PTHREAD_COND_INITIALIZER;
pid_t g_forkPid = -1;
int g_pidSet = 0;

pthread_mutex_t g_resultMutex = PTHREAD_MUTEX_INITIALIZER;
int g_waitpidWorks = 0;

pthread_mutex_t g_waitpidDoneMutex = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t g_waitpidDoneCond = PTHREAD_COND_INITIALIZER;
int g_waitpidDone = 0;

pthread_mutex_t g_coutMutex = PTHREAD_MUTEX_INITIALIZER;

void ErrorCheck(int errCode)
{
	if(errCode != 0)
	{
		exit(1);
	}
}

void* ForkThreadProc(void* arg)
{
	pid_t forkPid;
	int retCode;

	// fork a process
	forkPid = fork();
	if(forkPid < 0)
	{
		exit(1);
	}

	if(forkPid != 0)
	{
		retCode = pthread_mutex_lock(&g_pidMutex);
		ErrorCheck(retCode);

		g_forkPid  = forkPid;
		g_pidSet = 1;
		retCode = pthread_cond_broadcast(&g_pidSetCond);
		ErrorCheck(retCode);

		pthread_mutex_unlock(&g_pidMutex);
	}

	return 0;
}

void* WaitpidThreadProc(void* arg)
{
	int retCode;
	pid_t wpid;
	int status;
	struct timespec timeout;

	retCode = pthread_mutex_lock(&g_pidMutex);
	ErrorCheck(retCode);

	// 30 second timeout
	timeout.tv_sec = time(0) + 30;
	timeout.tv_nsec = 0;

	// wait until the pid is set
	while(!g_pidSet)
	{
		retCode = pthread_cond_timedwait(&g_pidSetCond, &g_pidMutex, &timeout); 
		if(retCode == ETIMEDOUT || retCode != 0)
		{
			break;
		}
	}

	do
	{
		// try waitpid
		wpid = waitpid(g_forkPid, &status, WNOHANG | WUNTRACED);
	} while (wpid < 0 && errno == EINTR);

	pthread_mutex_unlock(&g_pidMutex);

	retCode = pthread_mutex_lock(&g_resultMutex);
	ErrorCheck(retCode);

	if(wpid < 0)
	{
		g_waitpidWorks = 0;
	}
	else
	{
		g_waitpidWorks = 1;
	}
	pthread_mutex_unlock(&g_resultMutex);

	retCode = pthread_mutex_lock(&g_waitpidDoneMutex);
	ErrorCheck(retCode);

	// signal that we are done
	g_waitpidDone = 1;
	retCode = pthread_cond_signal(&g_waitpidDoneCond);
	ErrorCheck(retCode);
	pthread_mutex_unlock(&g_waitpidDoneMutex);

	return 0;
}

int main(int argc, char* argv[])
{
	int retCode;
	struct timespec timeout;

	pthread_t forkThread;
	retCode = pthread_create(&forkThread, 0, &ForkThreadProc, 0);
	if(retCode != 0)
	{
		return 1;
	}

	pthread_t waitPidThread;
	retCode = pthread_create(&waitPidThread, 0, &WaitpidThreadProc, 0);
	if(retCode!= 0)
	{
		return 1;
	}

	// lock the mutex
	retCode = pthread_mutex_lock(&g_waitpidDoneMutex);
	ErrorCheck(retCode);
	
	// 30 second timeout
	timeout.tv_sec = time(0) + 30;
	timeout.tv_nsec = 0;

	while(!g_waitpidDone)
	{
		retCode = pthread_cond_timedwait(&g_waitpidDoneCond, &g_waitpidDoneMutex, &timeout); 
		if(retCode == ETIMEDOUT || retCode != 0)
		{
			break;
		}
	}
	pthread_mutex_unlock(&g_waitpidDoneMutex);


	retCode = pthread_mutex_lock(&g_resultMutex);
	ErrorCheck(retCode);

	if(!g_waitpidWorks)
	{
		return 1;
	}
	return 0;
}
], 
[
	AC_MSG_RESULT(no)
], 
[
	AC_MSG_RESULT(yes)
	AC_DEFINE(WAITPID_THREADING_PROBLEM, 1, [Define to 1 if fork and waitpid must be done by the same thread])
])
fi # end: if test "x$LINUX" = "x1"; then

# restore flags after pthread tests
LIBS=$OLD_LIBS

dnl ----- Check support for IPV6  ----------------
ENABLE_IPV6=no
AC_MSG_CHECKING([whether IPv6 support is requested])
AC_ARG_ENABLE(ipv6,
AC_HELP_STRING(--enable-ipv6, enable ipv6 (with ipv4) support),
[
	if test "$enable_ipv6" = yes; then
		ENABLE_IPV6=yes
		AC_MSG_RESULT(yes)
	else
		AC_MSG_RESULT(no)
	fi
],
[
	AC_MSG_RESULT(no)
])

if test x$ENABLE_IPV6 = xyes; then
	AC_MSG_CHECKING(whether IPv6 support is possible)
	AC_TRY_RUN(
	[
		/* is AF_INET6 available? */
		#include <sys/types.h>
		#include <sys/socket.h>
		#include <netinet/in.h>
		main()
		{
			struct sockaddr_storage unused;
			if (socket(AF_INET6, SOCK_STREAM, 0) < 0)
				exit(1);
			else
				exit(0);
		}
	],
	[
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IPV6, 1, IPv6 is present and enabled)
	],
	[
		AC_MSG_ERROR([IPv6 support requested but not present])
	])
fi
dnl ----- End check support for IPv6  ------------

#REGEX_LIB=""
AC_MSG_CHECKING([whether to integrate the posix regex library])
AC_ARG_WITH(regex,
BLOCXX_HELP_STRING(--with-regex[=PATH],specify path to POSIX regex library))
case "$with_regex" in
        no)
            AC_MSG_RESULT(no)
        ;;
        yes|"")
            AC_MSG_RESULT(yes)
            AC_CHECK_FUNC(regcomp, [
                AC_DEFINE(HAVE_REGEX, 1, [Define to 1 if POSIX regex is avaliable])
                AC_CHECK_HEADERS([regex.h])
            ], [
                AC_CHECK_LIB(regex, regcomp, [
                    REGEX_LIB="-lregex"
                    AC_DEFINE(HAVE_REGEX, 1, [Define to 1 if POSIX regex is avaliable])
                    AC_CHECK_HEADERS([regex.h])
                ])
            ])
        ;;
        *)
            AC_MSG_RESULT(yes)
            if test -d "$withval"; then
                if test -d "${withval}/lib" && \
                   test -d "${withval}/include" ; then
                    REGEX_INC="-I${withval}/include"
                    REGEX_LIB="-L${withval}/lib -lregex"
                else
                    if test -f "${withval}/regex.h" ; then
                        REGEX_INC="-I${withval}"
                    fi
                    REGEX_LIB="-L${withval} -lregex"
                fi
            else
                REGEX_LIB="$withval"
            fi
            OLD_LIBS="$LIBS"
            LIBS="$REGEX_LIB $LIBS"
            AC_CHECK_FUNC(regcomp, [
                AC_DEFINE(HAVE_REGEX, 1, [Define to 1 if POSIX regex is avaliable])
                if test "x${REGEX_INC}" != x ; then
                    CPPFLAGS="${CPPFLAGS} ${REGEX_INC}"
                fi
                AC_CHECK_HEADERS([regex.h])
            ], [REGEX_LIB=""])
            LIBS="$OLD_LIBS"
        ;;
esac
AC_SUBST(REGEX_LIB)

AC_ARG_ENABLE(pcre,
BLOCXX_HELP_STRING(--disable-pcre,[disable perl regex (pcre) integration]))

AC_MSG_CHECKING([whether to integrate the pcre perl regex library])
if test "$enable_pcre" = no; then
        AC_MSG_RESULT(no)
        PCRE_LIB=""
else
        AC_MSG_RESULT(yes)
        if `pkg-config libpcre &>/dev/null` ; then
                PCRE_LIB=`pkg-config --libs libpcre 2>/dev/null`
                PCRE_INC=`pkg-config --cflags libpcre 2>/dev/null`
                PCRE_REQ=yes
        elif `pcre-config --libs &>/dev/null` ; then
                PCRE_LIB=`pcre-config --libs 2>/dev/null`
                PCRE_INC=`pcre-config --cflags 2>/dev/null`
                # hmm...
                PCRE_REQ=no
        fi
        if test "x${PCRE_LIB}" != x ; then
                OLD_LIBS="$LIBS"
                LIBS="$PCRE_LIB $LIBS"
                AC_CHECK_FUNC(pcre_version, [
                    AC_DEFINE(HAVE_PCRE, 1, [Define to 1 if PCRE regex is avaliable])
                    if test "x${PCRE_INC}" != x ; then
                        CPPFLAGS="${PCRE_INC} ${CPPFLAGS}"
                    fi
                    if test "$PCRE_REQ" = yes ; then
                        PKG_CONF_REQUIRES="${PKG_CONF_REQUIRES} libpcre"
                    fi

                    AC_CHECK_HEADERS([pcre.h])
                ], [PCRE_LIB=""])
                LIBS="$OLD_LIBS"
        else
                AC_MSG_WARN([Unable to find pcre library via pcre-config/pkg-config])
        fi
fi
AC_SUBST(PCRE_LIB)


##################################################
# Set up -Werror flag. This has to be done *after*
# all the tests run, because -Werror may make some
# of them fail.
AC_ARG_ENABLE(Werror,
BLOCXX_HELP_STRING(--disable-Werror,disable -Werror flag))

if test "$enable_Werror" != no; then
	BLOCXX_CHECK_COMPILER_FLAG(Werror,[CXXFLAGS="$CXXFLAGS -Werror"])
fi



pfx=$prefix
if test "x$pfx" = "xNONE"; then
	pfx=${ac_default_prefix}
fi
execpfx=$exec_prefix
if test "x$execpfx" = "xNONE"; then
	execpfx=$pfx
fi

#####################################################
# Set the location of the state dir
if test "x$localstatedir" != "x\${prefix}/var"; then
	tempDir=$localstatedir
else
	tempDir=$pfx/var
fi
AC_DEFINE_UNQUOTED(DEFAULT_STATE_DIR, "${tempDir}")

#####################################################
# Set the location of the lib dir
if test "x$libdir" != "x\${exec_prefix}/lib"; then
	tempDir=$libdir
else
	tempDir=$execpfx/lib
fi
AC_DEFINE_UNQUOTED(DEFAULT_LIB_DIR, "${tempDir}")


#####################################################
# Set the location of the bin dir
if test "x$bindir" != "x\${exec_prefix}/bin"; then
	tempDir=$bindir
else
	tempDir=$execpfx/bin
fi
AC_DEFINE_UNQUOTED(DEFAULT_BIN_DIR, "${tempDir}", "The bin dir")


#####################################################
# Set the location of the sbin dir
if test "x$sbindir" != "x\${exec_prefix}/sbin"; then
	tempDir=$sbindir
else
	tempDir=$execpfx/sbin
fi
AC_DEFINE_UNQUOTED(DEFAULT_SBIN_DIR, "${tempDir}", "The sbin dir")


#####################################################
# Set the location of the libexec dir
if test "x$libexecdir" != "x\${exec_prefix}/libexec"; then
	tempDir=$libexecdir
else
	tempDir=$execpfx/libexec
fi
AC_DEFINE_UNQUOTED(DEFAULT_LIBEXEC_DIR, "${tempDir}")

#####################################################
# Set the location of the sysconf dir
if test "x$sysconfdir" != "x\${prefix}/etc"; then
	tempDir=$sysconfdir
else
	tempDir=$pfx/etc
fi
AC_DEFINE_UNQUOTED(DEFAULT_SYSCONF_DIR, "${tempDir}")

# This is down at the bottom, because $libdir expands to
# "${exec_prefix}/lib".  This variable won't be available until the
# makefiles are generated.  This has the (unfortunate?) result that if
# --prefix is passed to configure, and --exec-prefix is not, stuff
# will end up rpath'd to a lib dir the blocxx libs are *not*
# installed to.

if test "x$RPATH_LINK_FLAG_REQUIRED" = "x1" ; then
	LDFLAGS="$LDFLAGS ${RPATH_LINK_FLAG}${RPATH_DEFAULT_PATH}$libdir"
fi

LDFLAGS="$LDFLAGS $USER_LDFLAGS"
CXXSHAREDLIBLINKFLAGS="$CXXCOMMONLINKFLAGS $CXXSHAREDLIBLINKFLAGS $LDFLAGS"
CXXBINLINKFLAGS="$CXXCOMMONLINKFLAGS $CXXBINLINKFLAGS $LDFLAGS"
CXXBUNDLELIBLINKFLAGS="$CXXCOMMONLINKFLAGS $CXXBUNDLELIBLINKFLAGS $LDFLAGS"
CBINLINKFLAGS="$CBINLINKFLAGS $LDFLAGS"

# used in blocxx.pc file
if test -n "${PKG_CONF_REQUIRES}" ; then
	PKG_CONF_REQUIRES="Requires: ${PKG_CONF_REQUIRES}"
fi
AC_SUBST(PKG_CONF_REQUIRES)
AC_SUBST(PKG_CONF_VERSION)
AC_SUBST(PKG_CONF_CFLAGS)
AC_SUBST(PKG_CONF_LIBS)

AC_SUBST(CXXSHAREDLIBLINKFLAGS)
AC_SUBST(CXXBUNDLELIBLINKFLAGS)
AC_SUBST(CXXBINLINKFLAGS)
AC_SUBST(CBINLINKFLAGS)
AC_SUBST(CXXLINK)
AC_SUBST(CLINK)

AC_OUTPUT(Makefile
src/Makefile
src/blocxx/Makefile
test/Makefile
test/CppUnit/Makefile
test/unit/Makefile
examples/Makefile
examples/cmdLineParser/Makefile
examples/threads/Makefile
examples/utils/Makefile
examples/intrusiveRef/Makefile
examples/sharedLibs/Makefile
examples/loggers/Makefile
examples/collections/Makefile
examples/regex/Makefile
examples/pcre/Makefile
examples/iconv/Makefile
doc/Makefile
Doxyfile
)

dnl Create a sed script to replace all of the substituted variables.
BLOCXX_REPLACEMENT_SCRIPT(replacement_script.sed)
